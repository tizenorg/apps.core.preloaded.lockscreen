/*
 * Copyright (c) 2009-2014 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group {
	name: "camera-layout";
	images {
		image: "lock_circle_line_camera_drag.png" COMP;
		image: "lock_circle_line_camera.png" COMP;
		image: "quick_shot_bg.png" COMP;
		image: "quick_shot_icon.png" COMP;
	}
	parts {
		part {
			name: "bg";
			type: SPACER;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 1 1;
				min: CAMERA_LAYOUT_SIZE CAMERA_LAYOUT_SIZE;
				max: CAMERA_LAYOUT_SIZE CAMERA_LAYOUT_SIZE;
				rel1 { relative: 0.0 0.0; }
				rel2 { relative: 1.0 1.0; }
			}
		}
		part {
			name: "img.camera.circle.line";
			type: IMAGE;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 1 1;
				rel1 { relative: 0.5 0.5; to: "bg"; }
				rel2 { relative: 0.5 0.5; to: "bg"; }
				min: CAMERA_ICON_SIZE CAMERA_ICON_SIZE;
				max: CAMERA_ICON_SIZE CAMERA_ICON_SIZE;
				image.normal: "lock_circle_line_camera.png";
				visible: 0;
			}
			description {
				state: "release" 0.0;
				inherit: "default" 0.0;
				min: CAMERA_ICON_SIZE CAMERA_ICON_SIZE;
				max: CAMERA_ICON_SIZE CAMERA_ICON_SIZE;
				visible: 0;
			}
			description {
				state: "press" 0.0;
				inherit: "default" 0.0;;
				min: CAMERA_LAYOUT_SIZE CAMERA_LAYOUT_SIZE;
				max: CAMERA_LAYOUT_SIZE CAMERA_LAYOUT_SIZE;
				visible: 1;
			}
		}
		part {
			name: "img.camera.circle.drag";
			type: IMAGE;
			description {
				state: "default" 0.0;
				fixed: 1 1;
				align: 0.5 0.5;
				rel1 { relative: 0.5 0.5; to: "bg"; }
				rel2 { relative: 0.5 0.5; to: "bg"; }
				min: 1 1;
				max: 1 1;
				image.normal: "lock_circle_line_camera_drag.png";
				visible: 0;
			}
			description {
				state: "release" 0.0;
				inherit: "default" 0.0;
				min: 1 1;
				max: 1 1;
				visible: 0;
			}
			description {
				state: "press" 0.0;
				inherit: "default" 0.0;;
				visible: 1;
			}
		}
		part {
			name: "img.camera.bg";
			type: IMAGE;
			scale: 1;
			description {
				state: "default" 0.0;
				min: CAMERA_ICON_SIZE CAMERA_ICON_SIZE;
				max: CAMERA_ICON_SIZE CAMERA_ICON_SIZE;
				fixed: 1 1;
				rel1 { relative: 0.5 0.5; to: "bg"; }
				rel2 { relative: 0.5 0.5; to: "bg"; }
				image.normal: "quick_shot_bg.png";
				color_class: "AO001";
			}
			description {
				state: "release" 0.0;
				inherit: "default" 0.0;
				color_class: "AO001";
			}
			description {
				state: "press" 0.0;
				inherit: "default" 0.0;;
				color_class: "AO001P";
			}
		}
		part {
			name: "img.camera.icon";
			type: IMAGE;
			scale: 1;
			repeat_events: 1;
			description {
				state: "default" 0.0;
				min: CAMERA_ICON_SIZE CAMERA_ICON_SIZE;
				max: CAMERA_ICON_SIZE CAMERA_ICON_SIZE;
				fixed: 1 1;
				rel1 { relative: 0.5 0.5; to: "img.camera.bg"; }
				rel2 { relative: 0.5 0.5; to: "img.camera.bg"; }
				image.normal: "quick_shot_icon.png";
				map {
					on: 1;
					rotation {
						center: "bg";
						x: 0.0;
						y: 0.0;
						z: 0.0;
					}
				}
			}
		}
	}
	programs {
		script{
			public use_custom;
			public g_mouse_down;
			public g_full_state;
			public g_angle;
			public g_angle_new;
			public g_angle_old;
			public g_angle_busy;
			public g_anim_fill_enable;
			public g_filler_expanded;
		}
		program {
			name: "init,layout";
			signal: "load";
			source: "";
			script {
				set_int(g_mouse_down, 0);
				set_int(g_angle, 0);
				set_int(g_angle_new, 0);
				set_int(g_angle_busy, 0);
				set_int(g_anim_fill_enable, 0);
				set_int(g_full_state, 0);
				set_int(g_filler_expanded, 0);
				set_int(use_custom, 0);
			}
		}
		program {
			name: "rotation,end";
			script {
				new angle_old;
				new angle_new;

				angle_old = get_int(g_angle);
				angle_new = get_int(g_angle_new);

				if (angle_old != angle_new) {
					set_int(g_angle_busy, 1);
				} else {
					set_int(g_angle_busy, 0);
				}
			}
		}
		program {
			signal: "mouse,down,1";
			source: "img.camera.bg";
			action: SIGNAL_EMIT "camera,icon,mouse,down" "img.camera.bg";
			script {
				set_int(g_mouse_down, 1);
			}
		}
		program {
			name: "camera,icon,press";
			signal: "camera,icon,press";
			source: "img.camera.bg";
			action: STATE_SET "press" 0.0;
			target: "img.camera.bg";
			target: "img.camera.circle.drag";
			after: "camera,circle,start";
		}
		program {
			name: "camera,circle,start";
			source: "img.camera.circle.line";
			action: STATE_SET "press" 0.0;
			target: "img.camera.circle.line";
			transition: SIN_FAC 0.5 1.7;
		}
		program {
			signal: "mouse,up,1";
			source: "img.camera.bg";
			action: SIGNAL_EMIT "camera,icon,mouse,up" "img.camera.bg";
			script {
				set_int(g_mouse_down, 0);
			}

		}
		program {
			name: "camera,icon,release";
			signal: "camera,icon,release";
			source: "img.camera.bg";
			action: STATE_SET "release" 0.0;
			target: "img.camera.bg";
			after: "camera,circle,end";
		}
		program {
			name: "camera,circle,end";
			source: "img.camera.circle.line";
			action: STATE_SET "release" 0.0;
			target: "img.camera.circle.line";
			target: "img.camera.circle.drag";
			transition: SIN_FAC 0.5 1.7;
		}
		program {
			signal: "mouse,move";
			source: "img.camera.icon";
			script {
				new x;
				new y;
				get_mouse(x, y);

				if (get_int(g_mouse_down) == 0) {
					return ;
				}

				new x_icon;
				new y_icon;
				new w_icon;
				new h_icon;
				get_geometry(PART:"img.camera.icon", x_icon, y_icon, w_icon, h_icon);

				new x_max;
				new y_max;
				new w_max;
				new h_max;
				get_geometry(PART:"bg", x_max, y_max, w_max, h_max);

				new Float:d_x;
				new Float:d_y;
				d_x = abs((x_icon + (w_icon / 2) - x) * 2);
				d_y = abs((y_icon + (h_icon / 2) - y) * 2);

				new min = round(sqrt((d_x * d_x) + (d_y * d_y)));

				min = (min > w_max) ? w_max : min;
				min = (min < w_icon) ? w_icon : min;

				custom_state(PART:"img.camera.circle.drag", "press", 0.0);
				set_state_val(PART:"img.camera.circle.drag", STATE_MIN, min, min);
				set_state_val(PART:"img.camera.circle.drag", STATE_MAX, min, min);
				set_state(PART:"img.camera.circle.drag", "custom", 0.0);

				if (min >= w_max) {
					if (get_int(g_full_state) == 0) {
						stop_programs_on(PART:"img.camera.circle.line");
					}
					set_int(g_full_state, 1);
				} else {
					set_int(g_full_state, 0);
				}
				set_int(g_filler_expanded, 1);
			}
		}
	}
}
