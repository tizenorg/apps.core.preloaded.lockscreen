/*
 * Copyright (c) 2009-2014 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#define ITEM_TITLE_HEIGHT 27

group {
	styles {
		style {
			name: "variable_style";
			base: "font=Tizen:style=Regular color=#FFFFFFFF color_class=ATO009 font_size=24 text_class=ATO009 align=right ellipsis=1.0";
		}
		style {
			name: "title_style";
			base: "font=Tizen:style=Regular color=#FFFFFFFF color_class=ATO039 font_size=30 text_class=ATO039 ellipsis=1.0";
		}
		style {
			name: "content_style";
			base: "font=Tizen:style=Regular color=#FFFFFFFF color_class=ATO010 font_size=24 text_class=ATO010 ellipsis=1.0";
		}
		style {
			name: "time_style";
			base: "font=Tizen:style=Regular color=#FFFFFFFF color_class=ATO010 font_size=24 text_class=ATO010 align=right";
		}
		style {
			name: "selected_style";
			base: "font=Tizen:style=Regular color=#FFFFFFFF color_class=ATO039 font_size=30 text_class=ATO039 wrap=mixed";
		}
	}
	images {
		image: "event_list_bg.#.png" COMP;
	}
	name: "missed-event-item";
	parts {
		part {
			name: "bg";
			type: RECT;
			mouse_events: 1;
			repeat_events: 1;
			description {
				state: "default" 0.0;
				color:  0 0 0 0;
			}
		}
		part {
			name: "sw.icon";
			type: SWALLOW;
			description {
				state: "default" 0.0;
				align: 0.0 0.0;
				rel1 { relative: 12/WIN_WIDTH 17/MISSED_EVT_ITEM_HEIGHT; to: "bg"; }
				rel2 { relative: (12+MISSED_EVT_ICON_SIZE)/WIN_WIDTH (17+MISSED_EVT_ICON_SIZE)/MISSED_EVT_ITEM_HEIGHT; to: "bg"; }
			}
		}
		part {
			name: "txt.title";
			type: TEXTBLOCK;
			description {
				state: "default" 0.0;
				fixed: 1 1;
				align: 0.0 0.5;
				rel1 { relative: (12+MISSED_EVT_ICON_SIZE+12)/WIN_WIDTH 8/MISSED_EVT_ITEM_HEIGHT; to: "bg"; }
				rel2 { relative: 0.0 (8+41)/MISSED_EVT_ITEM_HEIGHT; to_x: "txt.time"; to_y: "bg"; offset: -14 0; }
				text {
					style: "title_style";
					min: 0 1;
					text: "";
				}
				visible: 1;
			}
			description {
				state: "selected" 0.0;
				inherit: "default" 0.0;
				visible: 0;
			}
			description {
				state: "disabled" 0.0;
				inherit: "default" 0.0;
				color: 0 0 0 50;
			}
		}
		part {
			name: "txt.content";
			type: TEXTBLOCK;
			mouse_events: 1;
			repeat_events: 1;
			description {
				state: "default" 0.0;
				fixed: 1 1;
				align: 0.0 0.5;
				rel1 { relative: (12+MISSED_EVT_ICON_SIZE+12)/WIN_WIDTH (8+41)/MISSED_EVT_ITEM_HEIGHT; to: "bg"; }
				rel2 { relative: 0.0 (8+41+33)/MISSED_EVT_ITEM_HEIGHT; to_x: "txt.time"; to_y: "bg"; offset: -14 0; }
				text {
					style: "content_style";
					text: "";
					min: 0 1;
				}
				visible: 1;
			}
			description {
				state: "selected" 0.0;
				inherit: "default" 0.0;
				visible: 0;
			}
			description {
				state: "disabled" 0.0;
				inherit: "default" 0.0;
				color: 0 0 0 50;
			}
		}
		part {
			name: "txt.selected.message";
			type: TEXTBLOCK;
			description {
				state: "default" 0.0;
				fixed: 1 1;
				align: 0.0 0.5;
				rel1 { relative: 0.0 0.0; to: "txt.title"; }
				rel2 { relative: 1.0 1.0; to: "txt.time"; }
				text {
					style: "selected_style";
					min: 0 1;
					text: "";
				}
				visible: 0;
			}
			description {
				state: "selected" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}
		part {
			name: "txt.variable";
			type: TEXTBLOCK;
			mouse_events: 1;
			repeat_events: 1;
			description {
				state: "default" 0.0;
				fixed: 1 1;
				align: 1.0 0.0;
				rel1 { relative: 0.0 8/MISSED_EVT_ITEM_HEIGHT; to_x: "txt.time"; to_y: "bg"; }
				rel2 { relative: 1.0 (8+41)/MISSED_EVT_ITEM_HEIGHT; to_x: "txt.time"; to_y: "bg"; }
				text {
					style: "variable_style";
					min: 0 1;
				}
				visible: 1;
			}
			description {
				state: "hidden" 0.0;
				inherit: "default";
				visible: 0;
			}
			description {
				state: "selected" 0.0;
				inherit: "default" 0.0;
				visible: 0;
			}
			description {
				state: "disabled" 0.0;
				inherit: "default" 0.0;
				color: 0 0 0 50;
			}
		}
		part {
			name: "txt.time";
			type: TEXTBLOCK;
			mouse_events: 1;
			repeat_events: 1;
			description {
				state: "default" 0.0;
				fixed: 1 1;
				align: 1.0 0.0;
				rel1 { relative: (WIN_WIDTH-14)/WIN_WIDTH (8+41)/MISSED_EVT_ITEM_HEIGHT; to: "bg"; }
				rel2 { relative: (WIN_WIDTH-14)/WIN_WIDTH (8+41+33)/MISSED_EVT_ITEM_HEIGHT; to: "bg"; }
				text {
					style: "time_style";
					min: 1 1;
					text: "";
					ellipsis: -1;
				}
				visible: 1;
			}
			description {
				state: "selected" 0.0;
				inherit: "default" 0.0;
				visible: 0;
			}
			description {
				state: "disabled" 0.0;
				inherit: "default" 0.0;
				color: 0 0 0 50;
			}
		}
		part {
			name: "btn.item";
			type: SWALLOW;
			mouse_events: 1;
			repeat_events: 1;
			description {
				state: "default" 0.0;
				fixed: 1 1;
				rel1.to: "bg";
				rel2.to: "bg";
			}
		}
	}
	programs {
		program {
			name: "set,selected";
			source: "bg";
			signal: "set,selected";
			action: STATE_SET "selected" 0.0;
			target: "txt.selected.message";
			target: "txt.title";
			target: "txt.content";
			target: "txt.variable";
			target: "txt.time";
		}
		program {
			name: "set,default";
			source: "bg";
			signal: "set,default";
			action: STATE_SET "default" 0.0;
			target: "txt.selected.message";
			target: "txt.title";
			target: "txt.content";
			target: "txt.variable";
			target: "txt.time";
		}
		program {
			name: "set,disabled";
			source: "bg";
			signal: "set,disabled";
			action: STATE_SET "disabled" 0.0;
			target: "txt.selected.message";
			target: "txt.title";
			target: "txt.content";
			target: "txt.variable";
			target: "txt.time";
		}
		program {
			name: "hide_noti_num_digits";
			source: "count";
			signal: "hide_count";
			action: STATE_SET "hidden" 0.0;
			target: "txt.variable";
		}
		program {
			name: "show_noti_num_digits";
			source: "count";
			signal: "show_count";
			action: STATE_SET "default" 0.0;
			target: "txt.variable";
		}
	}
}

#if 0
/* Elementary theme to overwrite */
group { name: "elm/genlist/item/type1/default";
   alias: "elm/genlist/item_compress/type1/default";
   alias: "elm/genlist/tree/type1/default";
   alias: "elm/genlist/tree_compress/type1/default";

   data.item: "banded_bg_area" "elm.swallow.bg";

   data.item: "texts" "elm.text elm.text.end elm.text.sub elm.text.sub.end";
   data.item: "contents" "elm.swallow.icon elm.swallow.icon.0 elm.swallow.icon.1 elm.swallow.icon.2 elm.swallow.end";

   script {
      public end_icon_visible = 0;
      public sub_end_text_visible = 0;
   }

   parts {
      // base spacer for item min height
      spacer { "base"; scale;
         desc { "default";
            min: 0 GENLIST_ITEM_1LINE_HEIGHT_INC;
         }
         desc { "sub_text_visible";
            min: 0 GENLIST_ITEM_2LINE_HEIGHT_INC;
         }
      }
      // background of item
      rect { name: "bg";
         desc { state: "default";
            rel1 { to: "base"; relative: 0.0 0.0; }
            rel2 { to: "base"; relative: 1.0 1.0; }
            color: 0 0 0 0;
         }
         desc { state: "pressed"; inherit: "default";
            color: 0 0 0 10;
         }
         desc { state: "disabled"; inherit: "default";
            color: 0 0 0 0;
         }
      }
      // swallow area for banded color
      swallow { "elm.swallow.bg"; scale;
         desc { "default";
            rel1 { to: "bg"; relative: 0.0 0.0; }
            rel2 { to: "bg"; relative: 1.0 1.0; }
         }
      }
      // left outside padding
      spacer { "elm.padding.left"; scale;
         desc { "default";
            fixed: 1 0;
            min: GENLIST_ITEM_LR_PADDING_INC 0;
            align: 0.0 0.5;
            rel1 { to: "elm.swallow.bg"; relative: 0.0 0.0; }
            rel2 { to: "elm.swallow.bg"; relative: 0.0 1.0; }
         }
      }
      // right outside padding
      spacer { "elm.padding.right"; scale;
         desc { "default";
            fixed: 1 0;
            min: GENLIST_ITEM_LR_PADDING_INC 0;
            align: 1.0 0.5;
            rel1 { to: "elm.swallow.bg"; relative: 1.0 0.0; }
            rel2 { to: "elm.swallow.bg"; relative: 1.0 1.0; }
         }
      }
      // top outside padding
      spacer { "elm.padding.top"; scale;
         desc { "default";
            fixed: 0 1;
            min: 0 GENLIST_ITEM_TOP_PADDING_INC;
            max: -1 GENLIST_ITEM_TOP_PADDING_INC;
            align: 0.5 0.0;
            rel1 { to: "elm.swallow.bg"; relative: 0.0 0.0; }
            rel2 { to: "elm.swallow.bg"; relative: 1.0 0.0; }
         }
      }
      // bottom outside padding
      spacer { "elm.padding.bottom"; scale;
         desc { "default";
            fixed: 0 1;
            min: 0 GENLIST_ITEM_BOTTOM_PADDING_INC;
            max: -1 GENLIST_ITEM_BOTTOM_PADDING_INC;
            align: 0.5 1.0;
            rel1 { to: "elm.swallow.bg"; relative: 0.0 1.0; }
            rel2 { to: "elm.swallow.bg"; relative: 1.0 1.0; }
         }
      }
      // left swallow (Type B)
      swallow { "elm.swallow.icon"; scale;
         desc { state: "default";
            fixed: 1 0;
            align: 0.0 0.5;
            rel1 { to_x: "elm.padding.left"; to_y: "elm.padding.top"; relative: 1.0 1.0; }
            rel2 { to_x: "elm.padding.left"; to_y: "elm.padding.bottom"; relative: 1.0 0.0; }
         }
      }
      // padding between Type B & Type A
      spacer { "elm.padding.B.A"; scale;
         desc { "default";
            fixed: 1 0;
            min: 0 0;
            align: 0.0 0.5;
            rel1 { to_x: "elm.swallow.icon"; to_y: "elm.padding.top"; relative: 1.0 1.0; }
            rel2 { to_x: "elm.swallow.icon"; to_y: "elm.padding.bottom"; relative: 1.0 0.0; }
         }
         desc { "icon_visible"; inherit: "default";
            min: GENLIST_ITEM_TYPE_BA_PADDING_INC 0;
         }
      }
      // right swallow (Type C)
      swallow { "elm.swallow.end"; scale;
         desc { state: "default";
            fixed: 1 0;
            align: 1.0 0.5;
            rel1 { to_x: "elm.padding.right"; to_y: "elm.padding.top"; relative: 0.0 1.0; }
            rel2 { to_x: "elm.padding.right"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
         }
      }
      // padding between Type D & Type C
      spacer { "elm.padding.D.C"; scale;
         desc { "default";
            fixed: 1 0;
            min: 0 0;
            align: 1.0 0.5;
            rel1 { to_x: "elm.swallow.end"; to_y: "elm.padding.top"; relative: 0.0 1.0; }
            rel2 { to_x: "elm.swallow.end"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
         }
         desc { "icon_visible"; inherit: "default";
            min: GENLIST_ITEM_TYPE_DC_PADDING_INC 0;
         }
      }
      // right swallow 2 (Type D)
      swallow { "elm.swallow.icon.2"; scale;
         desc { state: "default";
            fixed: 1 0;
            align: 1.0 0.5;
            rel1 { to_x: "elm.padding.D.C"; to_y: "elm.padding.top"; relative: 0.0 1.0; }
            rel2 { to_x: "elm.padding.D.C"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
         }
      }
      // padding between Type A & Type D
      spacer { "elm.padding.A.D"; scale;
         desc { "default";
            fixed: 1 0;
            min: 0 0;
            align: 1.0 0.5;
            rel1 { to_x: "elm.swallow.icon.2"; to_y: "elm.padding.top"; relative: 0.0 1.0; }
            rel2 { to_x: "elm.swallow.icon.2"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
         }
         desc { "icon_visible"; inherit: "default";
            min: GENLIST_ITEM_TYPE_AD_PADDING_INC 0;
         }
      }
      // sub text line
      textblock { "elm.text.sub.end"; scale;
         desc { "default";
            fixed: 1 1;
            min: 0 GENLIST_ITEM_SUB_LINE_HEIGHT_INC;
            max: GENLIST_ITEM_END_TEXT_WIDTH_INC -1;
            align: 1.0 1.0;
            rel1 { to_x: "elm.padding.A.D"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
            rel2 { to_x: "elm.padding.A.D"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
            text.style: "list_text_sub_end";
            text.min: 1 1;
            text.max: 0 1;
         }
         desc { "pressed"; inherit: "default";
            text.style: "list_text_sub_end_press";
         }
         desc { "disabled"; inherit: "default";
            text.style: "list_text_sub_end_dim";
         }
      }
      spacer { "elm.padding.sub.text.end"; scale;
         desc { "default";
            fixed: 1 0;
            min: 0 0;
            align: 1.0 0.5;
            rel1 { to_x: "elm.swallow.icon.1"; to_y: "elm.padding.top"; relative: 0.0 1.0; }
            rel2 { to_x: "elm.swallow.icon.1"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
         }
         desc { "icon_visible"; inherit: "default";
            min: GENLIST_ITEM_SUB_LINE_TEXT_END_PADDING_INC 0;
         }
         desc { "text_visible"; inherit: "default";
            min: GENLIST_ITEM_SUB_LINE_TEXT_END_PADDING_INC 0;
            rel1 { to_x: "elm.text.sub.end"; to_y: "elm.padding.top"; relative: 0.0 1.0; }
            rel2 { to_x: "elm.text.sub.end"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
         }
      }
      textblock { "elm.text.sub"; scale;
         desc { "default";
            fixed: 1 1;
            min: 0 GENLIST_ITEM_SUB_LINE_HEIGHT_INC;
            align: 0.5 1.0;
            rel1 { to_x: "elm.padding.B.A"; to_y: "elm.padding.bottom"; relative: 1.0 0.0; }
            rel2 { to_x: "elm.padding.sub.text.end"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
            text.style: "list_text_sub_01";
            text.min: 0 1;
         }
         desc { "pressed"; inherit: "default";
            text.style: "list_text_sub_01_press";
         }
         desc { "disabled"; inherit: "default";
            text.style: "list_text_sub_01_dim";
         }
      }
      // bottom base of main text line
      spacer { "base_line";
         desc { "default";
            fixed: 0 1;
            rel1 { to: "elm.padding.bottom"; relative: 0.0 0.0; }
            rel2 { to: "elm.padding.bottom"; relative: 1.0 0.0; }
         }
         desc { "sub_text_visible"; inherit: "default";
            rel1 { to_y: "elm.text.sub"; relative: 0.0 0.0; }
            rel2 { to_y: "elm.text.sub"; relative: 1.0 0.0; }
         }
      }
      // main text line
      swallow { "elm.swallow.icon.0"; scale;
         desc { "default";
            fixed: 1 0;
            align: 0.0 0.5;
            rel1 { to_x: "elm.padding.B.A"; to_y: "elm.padding.top"; relative: 1.0 1.0; }
            rel2 { to_x: "elm.padding.B.A"; to_y: "base_line"; relative: 1.0 0.0; }
         }
      }
      swallow { "elm.swallow.icon.1"; scale;
         desc { "default";
            fixed: 1 0;
            align: 1.0 0.5;
            rel1 { to_x: "elm.padding.A.D"; to_y: "elm.padding.top"; relative: 0.0 1.0; }
            rel2 { to_x: "elm.padding.A.D"; to_y: "base_line"; relative: 0.0 0.0; }
         }
      }
      spacer { "elm.padding.main.icon.text"; scale;
         desc { "default";
            fixed: 1 0;
            min: 0 0;
            align: 0.0 0.5;
            rel1 { to: "elm.swallow.icon.0"; to_y: "elm.padding.top"; relative: 1.0 1.0; }
            rel2 { to: "elm.swallow.icon.0"; to_y: "base_line"; relative: 1.0 0.0; }
         }
         desc { "icon_visible"; inherit: "default";
            min: GENLIST_ITEM_MAIN_LINE_ICON_TEXT_PADDING_INC 0;
         }
      }
      textblock { "elm.text.end"; scale;
         desc { "default";
            fixed: 1 0;
            min: 0 GENLIST_ITEM_MAIN_LINE_HEIGHT_INC;
            max: GENLIST_ITEM_END_TEXT_WIDTH_INC -1;
            align: 1.0 0.5;
            rel1 { to_x: "elm.padding.A.D"; to_y: "elm.padding.top"; relative: 0.0 1.0; }
            rel2 { to_x: "elm.padding.A.D"; to_y: "base_line"; relative: 0.0 0.0; }
            text.style: "list_text_end";
            text.min: 1 1;
            text.max: 0 1;
         }
         desc { "pressed"; inherit: "default";
            text.style: "list_text_end_press";
         }
         desc { "disabled"; inherit: "default";
            text.style: "list_text_end_dim";
         }
      }
      spacer { "elm.padding.main.text.end"; scale;
         desc { "default";
            fixed: 1 0;
            min: 0 0;
            align: 1.0 0.5;
            rel1 { to_x: "elm.swallow.icon.1"; to_y: "elm.padding.top"; relative: 0.0 1.0; }
            rel2 { to_x: "elm.swallow.icon.1"; to_y: "base_line"; relative: 0.0 0.0; }
         }
         desc { "icon_visible"; inherit: "default";
            min: GENLIST_ITEM_MAIN_LINE_TEXT_END_PADDING_INC 0;
         }
         desc { "text_visible"; inherit: "default";
            min: GENLIST_ITEM_MAIN_LINE_TEXT_END_PADDING_INC 0;
            rel1 { to_x: "elm.text.end"; to_y: "elm.padding.top"; relative: 0.0 1.0; }
            rel2 { to_x: "elm.text.end"; to_y: "base_line"; relative: 0.0 0.0; }
         }
         desc { "sub_text_visible"; inherit: "default";
            min: GENLIST_ITEM_MAIN_LINE_TEXT_END_PADDING_INC 0;
            rel1 { to_x: "elm.text.sub.end"; to_y: "elm.padding.top"; relative: 0.0 1.0; }
            rel2 { to_x: "elm.text.sub.end"; to_y: "base_line"; relative: 0.0 0.0; }
         }
      }
      textblock { "elm.text"; scale;
         desc { "default";
            fixed: 1 0;
            min: 0 GENLIST_ITEM_MAIN_LINE_HEIGHT_INC;
            align: 0.5 0.5;
            rel1 { to_x: "elm.padding.main.icon.text"; to_y: "elm.padding.top"; relative: 1.0 1.0; }
            rel2 { to_x: "elm.padding.main.text.end"; to_y: "base_line"; relative: 0.0 0.0; }
            text.style: "list_text_main";
            text.min: 0 1;
         }
         desc { "pressed"; inherit: "default";
            text.style: "list_text_main_press";
         }
         desc { "disabled"; inherit: "default";
            text.style: "list_text_main_dim";
         }
      }
      rect { "elm.bottomline"; scale;
         desc { "default";
            fixed: 0 1;
            min: 0 LIST_BOTTOMLINE_HEIGHT;
            max: -1  LIST_BOTTOMLINE_HEIGHT;
            align: 0.5 0.0;
            rel1.relative: 0.0 0.0;
            rel2.relative: 1.0 0.0;
            color: 204 204 204 255;
         }
         desc { "hidden"; inherit: "default";
            visible: 0;
         }
      }
   }
   programs {
      LIST_PROGRAM_SOUND
      program {
         signal: "elm,state,elm.swallow.bg,visible";
         source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "elm.bottomline";
      }
      program {
         signal: "elm,state,elm.swallow.icon,visible";
         source: "elm";
         action: STATE_SET "icon_visible" 0.0;
         target: "elm.padding.B.A";
      }
      program {
         signal: "elm,state,elm.swallow.icon.2,visible";
         source: "elm";
         action: STATE_SET "icon_visible" 0.0;
         target: "elm.padding.A.D";
      }
      program {
         signal: "elm,state,elm.swallow.end,visible";
         source: "elm";
         action: STATE_SET "icon_visible" 0.0;
         target: "elm.padding.D.C";
      }
      program {
         signal: "elm,state,elm.swallow.icon.0,visible";
         source: "elm";
         action: STATE_SET "icon_visible" 0.0;
         target: "elm.padding.main.icon.text";
      }
      program {
         signal: "elm,state,elm.swallow.icon.1,visible";
         source: "elm";
         script {
            if (get_int(sub_end_text_visible) == 0) {
               set_state(PART:"elm.padding.main.text.end", "icon_visible", 0.0);
               set_state(PART:"elm.padding.sub.text.end", "icon_visible", 0.0);
            }
            else {
               set_state(PART:"elm.padding.main.text.end", "sub_text_visible", 0.0);
               set_state(PART:"elm.padding.sub.text.end", "text_visible", 0.0);
            }
            set_int(end_icon_visible, 1);
         }
      }
      program {
         signal: "elm,state,elm.text.sub,visible";
         source: "elm";
         action: STATE_SET "sub_text_visible" 0.0;
         target: "base";
         target: "base_line";
      }
      program {
         signal: "elm,state,elm.text.end,visible";
         source: "elm";
         script {
            if (get_int(end_icon_visible) == 1 && get_int(sub_end_text_visible) == 1) {
               set_state(PART:"elm.padding.main.text.end", "sub_text_visible", 0.0);
            }
            else {
               set_state(PART:"elm.padding.main.text.end", "text_visible", 0.0);
            }
         }
      }
      program {
         signal: "elm,state,elm.text.sub.end,visible";
         source: "elm";
         script {
            set_int(sub_end_text_visible, 1);
            set_state(PART:"elm.padding.sub.text.end", "text_visible", 0.0);
            set_state(PART:"elm.swallow.icon.1", "text_visible", 0.0);
         }
      }
      program { name: "default";
         signal: "elm,state,default";
         source: "elm";
         script {
            set_state(PART:"base", "default", 0.0);
            set_state(PART:"base_line", "default", 0.0);
            set_state(PART:"elm.swallow.icon.1", "default", 0.0);
            set_state(PART:"elm.padding.B.A", "default", 0.0);
            set_state(PART:"elm.padding.A.D", "default", 0.0);
            set_state(PART:"elm.padding.D.C", "default", 0.0);
            set_state(PART:"elm.padding.main.icon.text", "default", 0.0);
            set_state(PART:"elm.padding.main.text.end", "default", 0.0);
            set_state(PART:"elm.padding.sub.text.end", "default", 0.0);
            set_state(PART:"elm.bottomline", "default", 0.0);
            set_state(PART:"bg", "default", 0.0);
            set_state(PART:"elm.text", "default", 0.0);
            set_state(PART:"elm.text.end", "default", 0.0);
            set_state(PART:"elm.text.sub", "default", 0.0);
            set_state(PART:"elm.text.sub.end", "default", 0.0);
            set_int(sub_end_text_visible, 0);
         }
      }
      program { name: "pressed";
         signal: "elm,state,selected";
         source: "elm";
         action: STATE_SET "pressed" 0.0;
         target: "bg";
         target: "elm.text";
         target: "elm.text.end";
         target: "elm.text.sub";
         target: "elm.text.sub.end";
      }
      program { name: "unpressed";
         signal: "elm,state,unselected";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "bg";
         target: "elm.text";
         target: "elm.text.end";
         target: "elm.text.sub";
         target: "elm.text.sub.end";
      }
      program { name: "enabled";
         signal: "elm,state,enabled";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "bg";
         target: "elm.text";
         target: "elm.text.end";
         target: "elm.text.sub";
         target: "elm.text.sub.end";
      }
      program { name: "disabled";
         signal: "elm,state,disabled";
         source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "bg";
         target: "elm.text";
         target: "elm.text.end";
         target: "elm.text.sub";
         target: "elm.text.sub.end";
      }
   }
}
#endif
